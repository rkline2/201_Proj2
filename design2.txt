"""
File: design2.txt
Author: Rooklyn Kline
Date: 11/1/19
Section: 15
E-mail: rkline2@umbc.edu
Description:
 This program represents a pen and paper game called Sim. The two players
alternately draw a line from two vertices in a hexagon by entering in the two
vertices when asked to do so. As you're playing the game, if the you draw
a triangle then you loose the game.

"""

# Used to determine if the user has entered anything
NOTHING = ''

# Represents the the players symbol
PLAYER_1_SYMBOL = 0
PLAYER_2_SYMBOL = 1

# Statements that are printed out if it follows certain conditions
INVALID = "Invalid input"
PLAYER_1_COORDINATE_QUESTION = "Enter player 1 coordinates: "
PLAYER_2_COORDINATE_QUESTION = "Enter player 2 coordinates: "
P1_CHARACTER_QUESTION = "Hello, what character would player 1 like to use? "
P2_CHARACTER_QUESTION = "Hello, what character would player 2 like to use? "
SINGLE_VALUE_ERR = "You can only enter a single value"
P1_LOSES = "Game over. player 1 losses"
P2_LOSES = "Game over. player 1 losses"

# Represents the parameters in a for-loop
END = 1
REVERSE = -1
BEGINNING = -1

# Numbers that are used as criteria of the imputed data
ZERO = 0
SIX = 6
TWO_LISTS = 2

# Calls values from a list
FIRST_VALUE = 0
SECOND_VALUE = 1


def ask_character():
    """
    Asks the user what symbol they would like to use while they play the game.
    
    :return: A list of the two imputed symbols as a single list.
    """


def nowhitespace(input_response):
    """
    This function removes all of the white spaces of any statement.

    :param input_response: This parameter represents the
    word you would like to remove all of the white spaces from.
    :return: The parameter as a single word.
    """


def convert_to_list(input_response):
    """
    This function converts the two imputed numbers (ex: 5 4) into a list.

    :param input_response: Represents the users imputed value.
    :return: The value as a single list.
    """


def are_coordinates_valid(coordinates):
    """
    Checks to see if the coordinates are valid by making sure that
    the two values are not the same (ex: [1,1]) and its not greater than
    or less than the vertices of the hexagon.

    :param coordinates: The user's imputed coordinates as a single list.
    :return: True if the input is valid and False if it is not.
    """


def reverse_the_list(entered_list):
    """
    Reverses the user's imputed coordinates.

    :param entered_list: The coordinates the user imputed as a single list.
    :return: The user's coordinates in reverse.
    """


def ask_p1_coordinates():
    """
    Asks player 1 for coordinates and calls are_coordinates_valid() to make sure
    it's valid. It will continue to ask the user for coordinates until it meets
    the are_coordinates_valid()'s criteria. It will have to call other
    functions inside of this function.

    :return: The user's imputed coordinates and the coordinate's values in reverse. This will
    all be in a 2-D list.
    """


def ask_p2_coordinates():
    """
    Asks player 2 for coordinates and calls are_coordinates_valid() to make sure
    it's valid. It will continue to ask the user for coordinates until it meets
    the are_coordinates_valid()'s criteria. It will have to call other
    functions inside of this function.

    :return: The user's imputed coordinates and the coordinate's values in reverse. This will
    all be in a 2-D list.
    """


def find_entered_val(main_list, test_list):
    """
    Makes sure that the imputed coordinates have not been previously used.

    :param main_list: A list of all of coordinates that has been used in the game.
    :param test_list: The list that needs to be tested.
    :return: Returns false if the tested coordinated have been used before.
    """


def print_game_board(p1_character, p2_character):
    """
    This function asks the each player the coordinates they would like to use. If the
    coordinates are valid, then it will print out the board and continue to ask for
    coordinates until a player has drawn a triangle. It will have to call other
    functions inside of this function.

    :param p1_character: The character's symbol for player 1.
    :param p2_character: The character's symbol for player 2.
    :return: none
    """


def is_winner(p1_moves, p2_moves, total_moves):
    """
    This function determines who loses the game by comparing the moves
    that have been made.

    :param p1_moves: The moves player 1 has made in the game.
    :param p2_moves: The moves player 2 has made in the game.
    :param total_moves: The total amount of moves in the game.
    :return: Returns false if there is not a winner. Returns
    true if there is a winner.
    """


if __name__ == '__main__':
   *Calls the ask_character() function and assigns it to a variable*
   *Calls the print_game_board() function and uses the variable for the
   ask_character() function as two paramaters by calling out the element
   in that variable (ex: char_list[FIRST_VALUE])*
